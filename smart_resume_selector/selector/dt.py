from sklearn import datasetsfrom sklearn.metrics import confusion_matriximport numpy as npfrom sklearn.model_selection import train_test_splitfrom sklearn.tree import DecisionTreeClassifierfrom joblib import dump, loaddata_set=NoneX=y=None# dividing X, y into train and test datadef dttrain(X,y):    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)    # Create Decision Tree classifer object    clf = DecisionTreeClassifier()    # Train Decision Tree Classifer    clf = clf.fit(X_train, y_train)    dump(clf, 'dtmodel.joblib')dy=[]X=[]y=[]def traing():    y=[]    training_data = np.loadtxt("training_dataset.txt", dtype=str, delimiter=",")    for record in training_data:        print(record)        if record[0] != '':            lis = []            lis.append(int(record[0]))            lis.append(int(record[1]))            lis.append(int(record[2]))            lis.append(int(record[3]))            lis.append(int(record[4]))            lis.append(int(record[5]))            lis.append(int(record[6]))            X.append(lis)            y.append(record[7])    yy=[]    for i in y:        if i not in dy:            dy.append(i)    for i in y:        yy.append(dy.index(i))    y=yy    print (dy)    dttrain(X,y)# traing()## ['extraverted', 'serious', 'dependable', 'lively', 'responsible']def predict1(fea):    dt=['extraverted', 'serious', 'dependable', 'lively', 'responsible']    dtm = load(r'dtmodel.joblib')    p = dtm.predict([fea])    return dt[p[0]]# print(predict(['1' ,'18', '5', '5', '7', '6', '5']))